const { Actor } = require(\'apify\');\nconst moment = require(\'moment\');\nconst puppeteer = require(\'puppeteer-extra\');\nconst StealthPlugin = require(\'puppeteer-extra-plugin-stealth\');\nconst ProxyChain = require(\'proxy-chain\');\nconst fs = require(\'fs\'); // Added fs import\n\npuppeteer.use(StealthPlugin());\n\nActor.init();\n\nasync function scrapeLinkedIn() {\n    await new Promise(resolve => setTimeout(resolve, 100)); \n    console.log(\'Inside scrapeLinkedIn. Using console.log for debugging.\');\n\n    console.log(\'scrapeLinkedIn function started.\'); \n    let browser = null;\n    let page = null;\n\n    try {\n        const input = await Actor.getInput();\n        const { password, ...inputToLog } = input;\n        console.log(\'Input received (password omitted for security):\', inputToLog);\n\n        const { \n            username,\n            profileUrls,\n            maxPosts = 0,\n            useProxy = false\n        } = input;\n\n        if (!profileUrls || !Array.isArray(profileUrls) || profileUrls.length === 0) {\n            console.warn(\'No profile URLs provided or profileUrls is not a valid array. Exiting peacefully.\');\n            return; \n        }\n\n        console.log(\'Launching browser...\');\n        browser = await puppeteer.launch({\n            headless: "new",\n            args: [\n                \'--no-sandbox\',\n                \'--disable-setuid-sandbox\',\n                \'--window-size=1920,1080\',\n                \'--disable-dev-shm-usage\',\n                \'--disable-accelerated-2d-canvas\',\n                \'--disable-gpu\'\n            ]\n        });\n        console.log(\'Browser launched.\');\n\n        page = await browser.newPage();\n        console.log(\'New page created.\');\n        \n        await page.setViewport({\n            width: 1920,\n            height: 1080,\n            deviceScaleFactor: 1,\n        });\n        console.log(\'Viewport set.\');\n\n        await page.setRequestInterception(true);\n        page.on(\'request\', (request) => {\n            if ([\'image\', \'stylesheet\', \'font\'].includes(request.resourceType())) {\n                request.abort();\n            } else {\n                request.continue();\n            }\n        });\n        console.log(\'Request interception set up.\');\n\n        page.setDefaultNavigationTimeout(100000);\n        page.setDefaultTimeout(60000);\n        console.log(\'Default timeouts set.\');\n\n        console.log(\'Logging in to LinkedIn...\');\n        \n        let retries = 3;\n        while (retries > 0) {\n            try {\n                console.log(\`Navigating to login page (attempt ${4 - retries}/3)...\`);\n                await page.goto(\'https://www.linkedin.com/login\', {\n                    waitUntil: [\'networkidle2\', \'domcontentloaded\'],\n                    timeout: 90000\n                });\n                console.log(\'Login page navigation successful.\');\n                break;\n            } catch (error) {\n                console.warn(\`Login page navigation attempt ${4 - retries}/3 failed: ${error.message}\`);\n                retries--;\n                if (retries === 0) {\n                    console.error(\'All login page navigation attempts failed.\');\n                    throw error;\n                }\n                await new Promise(resolve => setTimeout(resolve, 5000));\n            }\n        }\n\n        const usernameSelector = \'#username\';\n        const passwordSelector = \'#password\';\n        \n        console.log(\'Waiting for username and password fields...\');\n        await page.waitForSelector(usernameSelector, { timeout: 60000 });\n        await page.waitForSelector(passwordSelector, { timeout: 60000 });\n        console.log(\'Username and password fields found.\');\n\n        await page.type(usernameSelector, input.username);\n        await page.type(passwordSelector, input.password);\n        console.log(\'Credentials typed in.\');\n        \n        console.log(\'Clicking login button and waiting for navigation...\');\n        await Promise.all([\n            page.click(\'button[type="submit"]\'),\n            page.waitForNavigation({ \n                waitUntil: [\'networkidle2\', \'domcontentloaded\'],\n                timeout: 90000 \n            })\n        ]);\n        console.log(\'Login successful, navigation complete.\');\n\n        const posts = [];\n        for (const profileUrl of profileUrls) {\n            console.log(\`Scraping posts from ${profileUrl}\`);\n            \n            try {\n                retries = 3;\n                while (retries > 0) {\n                    try {\n                        console.log(\`Navigating to profile ${profileUrl} (attempt ${4 - retries}/3)...\`);\n                        await page.goto(profileUrl, {\n                            waitUntil: [\'networkidle2\', \'domcontentloaded\'],\n                            timeout: 90000\n                        });\n                        console.log(\`Navigation to profile ${profileUrl} successful.\`);\n                        break;\n                    } catch (error) {\n                        console.warn(\`Profile navigation attempt ${4 - retries}/3 for ${profileUrl} failed: ${error.message}\`);\n                        retries--;\n                        if (retries === 0) {\n                             console.error(\`All navigation attempts for ${profileUrl} failed.\`);\n                            throw error;\n                        }\n                        await new Promise(resolve => setTimeout(resolve, 5000));\n                    }\n                }\n\n                // New block to check for login/join page\n                console.log(\`Page URL before attempting to find selectors on ${profileUrl}: ${page.url()}\`);\n                const isLikelyLoginPage = await page.evaluate(() => {\n                    return !!(\n                        document.querySelector(\'form#join-form\') ||\n                        document.querySelector(\'form.login-form\') ||\n                        document.querySelector(\'a[href*="linkedin.com/login"]\') ||\n                        document.querySelector(\'a[data-tracking-control-name="auth_wall_desktop_profile_guest_nav_login-button"]\') ||\n                        document.querySelector(\'h1[data-test-id="authwall-join-form__title"]\') ||\n                        document.body.innerText.includes(\'Sign in to LinkedIn\') ||\n                        document.body.innerText.includes(\'Join LinkedIn\')\n                    );\n                });\n\n                if (isLikelyLoginPage) {\n                    console.warn(\`WARNING: Detected a login/join page at URL: ${page.url()} instead of profile content for ${profileUrl}. Login might have failed or session lost.\`);\n                    const loginPageHtml = await page.content();\n                    const safeProfileUrlLoginDetect = profileUrl.replace(/[^a-zA-Z0-9]/g, \'_\');\n                    await Actor.setValue(\`DEBUG_LOGIN_PAGE_DETECTED_${safeProfileUrlLoginDetect}.html\`, loginPageHtml, { contentType: \'text/html\' });\n                    \n                    const loginScreenshotPath = \`login_page_detected_${safeProfileUrlLoginDetect}.png\`;\n                    await page.screenshot({ path: loginScreenshotPath, fullPage: true });\n                    await Actor.setValue(\`DEBUG_LOGIN_PAGE_DETECTED_SCREENSHOT_${safeProfileUrlLoginDetect}.png\`, fs.readFileSync(loginScreenshotPath), { contentType: \'image/png\' });\n                    fs.unlinkSync(loginScreenshotPath); \n\n                    throw new Error(\`Redirected to a login/join page at ${profileUrl} when profile content was expected. Aborting scrape for this profile.\`);\n                }\n                // End of new block\n                \n                console.log(\`Waiting for profile main content on ${profileUrl}...\`);\n                const profileMainSelector = \'main[role="main"]\';\n                try {\n                    await page.waitForSelector(profileMainSelector, { timeout: 75000 }); \n                    console.log(\`Profile main content loaded for ${profileUrl} using selector: ${profileMainSelector}\`);\n                } catch (e) {\n                    console.warn(\`Primary selector \'${profileMainSelector}\' not found. Trying alternative \'#profile-content\'...\`);\n                    try {\n                        await page.waitForSelector(\'#profile-content\', { timeout: 75000 });\n                        console.log(\`Profile main content loaded for ${profileUrl} using selector: #profile-content\`);\n                    } catch (e2) {\n                        console.error(\`Both primary and alternative selectors for profile main content failed for ${profileUrl}: ${e2.message}\`);\n                        // Save HTML content for debugging if selectors fail\n                        if (page && typeof page.content === \'function\') {\n                            try {\n                                const htmlContent = await page.content();\n                                const safeProfileUrl = profileUrl.replace(/[^a-zA-Z0-9]/g, \'_\');\n                                await Actor.setValue(\`DEBUG_HTML_${safeProfileUrl}\`, htmlContent, { contentType: \'text/html\' });\n                                console.log(\`Saved HTML content for ${profileUrl} (DEBUG_HTML_${safeProfileUrl}) for debugging.\`);\n                            } catch (htmlError) {\n                                console.warn(\`Could not get HTML content for ${profileUrl}: ${htmlError.message}\`);\n                            }\n                        }\n                        // Try to take a screenshot as a fallback\n                        if (page && typeof page.screenshot === \'function\') {\n                            try {\n                                const safeProfileUrl = profileUrl.replace(/[^a-zA-Z0-9]/g, \'_\');\n                                await page.screenshot({ path: \`error_screenshot_${safeProfileUrl}.png\` });\n                                console.log(\`Error screenshot saved for profile ${profileUrl} as error_screenshot_${safeProfileUrl}.png\`);\n                                await Actor.setValue(\`error_screenshot_${safeProfileUrl}.png_kvs\`, \`Screenshot for ${profileUrl} when selectors failed.\`);\n\n                            } catch (screenshotError) {\n                                console.warn(\`Failed to take error screenshot for ${profileUrl} when selectors failed: ${screenshotError.message}\`);\n                            }\n                        }\n                        throw e2; // Re-throw the error to skip this profile\n                    }\n                }\n\n                const activitySelectors = [\n                    \'a[href*="detail/recent-activity/shares"]\',\n                    \'a[href*="detail/recent-activity/posts"]\',\n                    \'a[href*="recent-activity/all"]\',\n                    \'a[data-test-id="activity-section"]\' \n                ];\n\n                let activityButton = null;\n                console.log(\`Searching for activity tab on ${profileUrl}...\`);\n                for (const selector of activitySelectors) {\n                    activityButton = await page.$(selector);\n                    if (activityButton) {\n                        console.log(\`Activity tab found with selector: ${selector}\`);\n                        break;\n                    }\n                }\n\n                if (!activityButton) {\n                    console.warn(\`No activity tab found for ${profileUrl}. Skipping this profile.\`);\n                    continue;\n                }\n\n                console.log(\`Clicking activity tab and waiting for navigation on ${profileUrl}...\`);\n                await Promise.all([\n                    activityButton.click(),\n                    page.waitForNavigation({ \n                        waitUntil: [\'networkidle2\', \'domcontentloaded\'],\n                        timeout: 90000 \n                    })\n                ]);\n                console.log(\`Activity page navigation complete for ${profileUrl}.`);\n\n                console.log(\`Waiting for posts to load on activity page of ${profileUrl}...\`);\n                await new Promise(resolve => setTimeout(resolve, 7000));\n\n                let loadedPosts = [];\n                let previousHeight = 0;\n                let noNewPostsCount = 0;\n                const maxScrollAttempts = 10;\n\n                console.log(\`Starting scroll loop for ${profileUrl}...\`);\n                while (noNewPostsCount < maxScrollAttempts) {\n                    loadedPosts = await page.$$(\'.occludable-update, .feed-shared-update-v2\');\n                    console.log(\`Found ${loadedPosts.length} potential post elements in current view on ${profileUrl}.\`);\n                    \n                    if (maxPosts > 0 && posts.length + loadedPosts.length >= maxPosts) {\n                         console.log(\`Max posts limit (${maxPosts}) potentially reached. Will process current view and then stop for this profile.\`);\n                         break; \n                    }\n\n                    const currentHeight = await page.evaluate(() => document.documentElement.scrollHeight);\n                    if (currentHeight === previousHeight) {\n                        noNewPostsCount++;\n                        console.log(\`Scroll height unchanged. Attempt ${noNewPostsCount}/${maxScrollAttempts} on ${profileUrl}.\`);\n                    } else {\n                        noNewPostsCount = 0;\n                    }\n\n                    if (noNewPostsCount >= maxScrollAttempts){\n                        console.log(\`Max scroll attempts reached for ${profileUrl}. Assuming all posts loaded.\`);\n                        break;\n                    }\n\n                    previousHeight = currentHeight;\n                    console.log(\`Scrolling down on ${profileUrl}... Current height: ${currentHeight}\`);\n                    await page.evaluate(() => {\n                        window.scrollTo(0, document.documentElement.scrollHeight);\n                    });\n                    await new Promise(resolve => setTimeout(resolve, 3000));\n                }\n                console.log(\`Finished scroll loop for ${profileUrl}. Found ${loadedPosts.length} elements to process.\`);\n\n                let profilePostCount = 0;\n                for (const postElement of loadedPosts) {\n                    if (maxPosts > 0 && posts.length >= maxPosts) {\n                        console.log(\`Global max posts limit (${maxPosts}) reached. Stopping post extraction.\`);\n                        break;\n                    }\n                    try {\n                        const postData = await page.evaluate(element => {\n                            const textElement = element.querySelector(\'.feed-shared-update-v2__description .feed-shared-inline-show-more-text, .feed-shared-text, .update-components-text\');\n                            const text = textElement ? textElement.innerText.trim() : \'\';\n                            \n                            const timeElement = element.querySelector(\'time, .update-components-text-view__timestamp\');\n                            const timestamp = timeElement ? (timeElement.getAttribute(\'datetime\') || timeElement.innerText.trim()) : \'\';\n                            \n                            const likesElement = element.querySelector(\'.social-details-social-counts__reactions-count, .social-details-social-counts__count-value\');\n                            const likesText = likesElement ? likesElement.innerText.trim() : \'0\';\n                            const likes = parseInt(likesText.replace(/[^0-9]/g, \'\')) || 0;\n                            \n                            return {\n                                text,\n                                timestamp,\n                                likes\n                            };\n                        }, postElement);\n\n                        if (postData.text) {\n                            posts.push({\n                                ...postData,\n                                profileUrl,\n                                scrapedAt: new Date().toISOString()\n                            });\n                            profilePostCount++;\n                        } else {\n                            console.warn(\'Extracted post with no text content.\');\n                        }\n\n                    } catch (extractError) {\n                        console.error(\`Error extracting individual post data on ${profileUrl}: ${extractError.message}\`);\n                    }\n                }\n                console.log(\`Scraped ${profilePostCount} posts from ${profileUrl}. Total posts: ${posts.length}\`);\n\n            } catch (profileError) {\n                console.error(\`Failed to scrape profile ${profileUrl}: ${profileError.message}\`);\n                // Fallback screenshot if other attempts inside the nested try-catch failed or were not reached\n                if (page && typeof page.screenshot === \'function\') {\n                     try {\n                        const safeProfileUrl = profileUrl.replace(/[^a-zA-Z0-9]/g, \'_\');\n                        await page.screenshot({ path: \`fallback_error_screenshot_${safeProfileUrl}.png\` });\n                        console.log(\`Fallback error screenshot saved for profile ${profileUrl} as fallback_error_screenshot_${safeProfileUrl}.png\`);\n                        // Attempt to also save this to KVS if not already done by inner catch\n                         await Actor.setValue(\`fallback_error_screenshot_${safeProfileUrl}.png_kvs\`, \`Fallback screenshot for ${profileUrl}.\`);\n                    } catch (screenshotError) {\n                        console.warn(\`Failed to take fallback error screenshot for ${profileUrl}: ${screenshotError.message}\`);\n                    }\n                }\n            }\n        }\n\n        await Actor.pushData(posts);\n        console.log(\`Successfully scraped ${posts.length} total posts.\`);\n        \n    } catch (error) {\n        console.error(\`Scraping failed: ${error.message}\`, { stack: error.stack });\n        \n        if (page && typeof page.screenshot === \'function\') {\n            try {\n                await page.screenshot({\n                    path: \'global_error.png\',\n                    fullPage: true\n                });\n                console.log(\'Global error screenshot saved.\');\n                 await Actor.setValue(\'global_error.png_kvs\', \'Global error screenshot.\');\n            } catch (screenshotError) {\n                console.warn(\`Failed to take global error screenshot: ${screenshotError.message}\`);\n            }\n        }\n        throw error;\n    } finally {\n        if (browser) {\n            try {\n                console.log(\'Closing browser...\');\n                await browser.close();\n                console.log(\'Browser closed.\');\n            } catch (closeError) {\n                console.error(\`Error closing browser: ${closeError.message}\`);\n            }\n        }\n        console.log(\'scrapeLinkedIn function finished.\');\n    }\n}\n\nconsole.log(\'Logging setup: About to call Actor.main(scrapeLinkedIn)\');\nActor.main(scrapeLinkedIn);\n